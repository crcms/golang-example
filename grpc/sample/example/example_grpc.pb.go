// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ExampleRequestResponseClient is the client API for ExampleRequestResponse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleRequestResponseClient interface {
	ExampleCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type exampleRequestResponseClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleRequestResponseClient(cc grpc.ClientConnInterface) ExampleRequestResponseClient {
	return &exampleRequestResponseClient{cc}
}

func (c *exampleRequestResponseClient) ExampleCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ExampleRequestResponse/ExampleCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleRequestResponseServer is the server API for ExampleRequestResponse service.
// All implementations must embed UnimplementedExampleRequestResponseServer
// for forward compatibility
type ExampleRequestResponseServer interface {
	ExampleCall(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedExampleRequestResponseServer()
}

// UnimplementedExampleRequestResponseServer must be embedded to have forward compatible implementations.
type UnimplementedExampleRequestResponseServer struct {
}

func (UnimplementedExampleRequestResponseServer) ExampleCall(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExampleCall not implemented")
}
func (UnimplementedExampleRequestResponseServer) mustEmbedUnimplementedExampleRequestResponseServer() {
}

// UnsafeExampleRequestResponseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleRequestResponseServer will
// result in compilation errors.
type UnsafeExampleRequestResponseServer interface {
	mustEmbedUnimplementedExampleRequestResponseServer()
}

func RegisterExampleRequestResponseServer(s grpc.ServiceRegistrar, srv ExampleRequestResponseServer) {
	s.RegisterService(&_ExampleRequestResponse_serviceDesc, srv)
}

func _ExampleRequestResponse_ExampleCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleRequestResponseServer).ExampleCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExampleRequestResponse/ExampleCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleRequestResponseServer).ExampleCall(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExampleRequestResponse_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ExampleRequestResponse",
	HandlerType: (*ExampleRequestResponseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExampleCall",
			Handler:    _ExampleRequestResponse_ExampleCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
